#!/Library/Frameworks/Python.framework/Versions/Current/bin/python
import pdb

def load_Batom(return_dict='False'):
    '''
    This has the data from the file Batom.f writen by Chris Sneden in MOOG
    batom[Z,element_name_short,element_name_long,solar_abundance_logeps]
    
    return_dict : if 'False' then it will return a list of all the abundances
                  if 'by Z' then it will return a dictionary with keys which are proton number
                  if 'by el' then it will return a dictionary with keys which are element name
    
    
    '''
    batom=[[1,"H","Hydrogen",12.00],
            [2,"He","Helium",10.99],
            [3,"Li","Lithium",3.31],
            [4,"Be","Beryllium",1.42],
            [5,"B","Boron",2.88],
            [6,"C","Carbon",8.56],
            [7,"N","Nitorgen",8.05],
            [8,"O","Oxygen",8.93],
            [9,"F","Florine",4.56],
            [10,"Ne","Neon",8.09],
            [11,"Na","Sodium",6.33],
            [12,"Mg","Magnesium",7.58],
            [13,"Al","Aluminium",6.47],
            [14,"Si","Silicon",7.55],
            [15,"P","Phosphorus",5.45],
            [16,"S","Slufer",7.21],
            [17,"Cl","Chlorine",5.50],
            [18,"Ar","Argon",6.56],
            [19,"K","Potassium",5.12],
            [20,"Ca","Calcium",6.36],
            [21,"Sc","Scandium",3.10],
            [22,"Ti","titanium",4.99],
            [23,"V","Vanadium",4.00],
            [24,"Cr","Chromium",5.67],
            [25,"Mn","Maganese",5.39],
            [26,"Fe","Iron",7.52],
            [27,"Co","Cobalt",4.92],
            [28,"Ni","Nickel",6.25],
            [29,"Cu","copper",4.21],
            [30,"Zn","Zinc",4.60],
            [31,"Ga","Gallium",2.88],
            [32,"Ge","Germanium",3.41],
            [33,"As","Arsnic",2.37],
            [34,"Se","Selenium",3.35],
            [35,"Br","Bormine",2.63],
            [36,"Kr","Krypton",2.23],
            [37,"Rb","Rubidium",2.60],
            [38,"Sr","Strontium",2.90],
            [39,"Y","Yttrium",2.24],
            [40,"Zr","Zirconium",2.60],
            [41,"Nb","Niobium",1.42],
            [42,"Mo","Molybdenum",1.92],
            [43,"Tc","Technetium",0.00],
            [44,"Ru","Ruthenium",1.84],
            [45,"Rh","Rhodium",1.12],
            [46,"Pb","Palladium",1.69],
            [47,"Ag","Silver",1.24],
            [48,"Cd","Cadmium",1.86],
            [49,"In","Indium",0.82],
            [50,"Sn","Tin",2.00],
            [51,"Sb","Antimony",1.04],
            [52,"Te","Tellurium",2.24],
            [53,"In","Iodine",1.51],
            [54,"Xe","Xenon",2.23],
            [55,"Cs","Caesium",1.12],
            [56,"Ba","Barium",2.13],
            [57,"La","Lanthanum",1.22],
            [58,"Ce","Cerium",1.55],
            [59,"Pr","Praseodymium",0.71],
            [60,"Nd","Neodymium",1.50],
            [61,"Pm","Promethium",0.00],
            [62,"Sm","Samarium",1.00],
            [63,"Eu","Europium",0.51],
            [64,"Gd","Gadolinium",1.12],
            [65,"Tb","Terbium",0.33],
            [66,"Dy","Dyspeosium",1.10],
            [67,"Ho","Holmium",0.50],
            [68,"Er","Erbium",0.93],
            [69,"Tm","Thulium",0.13],
            [70,"Yb","Ytterbium",1.08],
            [71,"Lu","Luletium",0.12],
            [72,"Hf","Hafnium",0.88],
            [73,"Ta","Tantalum",0.13],
            [74,"W","Tungsten",0.68],
            [75,"Re","Rhenium",0.27],
            [76,"Os","Osmium",1.45],
            [77,"Ir","iridium",1.35],
            [78,"Pt","Plantinum",1.80],
            [79,"Au","Gold",0.83],
            [80,"Hg","Mercury",1.09],
            [81,"Tl","Thallium",0.82],
            [82,"Pb","Lead",1.85],
            [83,"Bi","Bismuth",0.71],
            [84,"Po","Polomium",0.00],
            [85,"At","Astatine",0.00],
            [86,"Rn","Radon",0.00],
            [87,"Fr","Francium",0.00],
            [88,"Ra","Radium",0.00],
            [89,"Ac","Actinium",0.00],
            [90,"Th","Thorium",0.12],
            [91,"Pa","Protactinium",0.00],
            [92,"U","Uranium",0.00],
            [93,"Np","Neptunium",0.00],
            [94,"Pu","Plutonium",0.00],
            [95,"Am","Americium",0.00]]


    if return_dict not in ['by Z','by el']: return batom
    
    
    if return_dict == 'by el': which = 1
    else: which = 0
    
    batomd={}
    for i in range(len(batom)): batomd[batom[i][which]] = batom[i]
    
    return batomd

def convert_atlas_for_moog (atlas_out_file,new_moog_file=None,clobber=False,include_depth_vt=False,logepsH=12,ions=[0,1]):
    """
    This takes the model output from ATLAS12 and converts it to MOOG's KURUCZ format for stellar atmospheres
    
    ================    =============================================================
    Keyword             (type) Description
    ================    =============================================================
    atlas_out_file      (str) Gives the file name of the final model from ATLAS12
    new_moog_file       (str/None) If str then uses this to create the new model file 
                           which MOOG can read
    clobber             (bool) if True then it will overwrite existing output files
    include_depth_vt    (bool) if True then it will include Vturb for all the model
                           depths in a way MOOG can read
    logepsH             (float) Fixes the abundance of H used. Only relavent for He
    ions                (int array) This array gives the ions to be used when 
                           creating an output. e.g. [0,1,2] ===>  26.0, 26.1 and 26.2
    ================   =============================================================
    
    NOTE: When it creates the abundance table at the bottom of the MOOG file it only 
    uses those abundances which depart from solar and doesn't include H or He
        
    """

    #=========================================================================#
    # initial functions
    import os
    import numpy as np

    if new_moog_file is not None:
        if os.path.exists(new_moog_file) and not clobber: raise IOError("File already exists: '"+new_moog_file+"'")   

    batom = load_Batom('by Z')
    
    def np_vstack_append (arr,item):
        dtype = arr.dtype.name    
        if len(arr) == 0: arr = np.array([item],dtype=dtype)
        else: arr = np.vstack((arr,item))
        return arr

    #=========================================================================#
    # read in the atlas file
    fin = open(atlas_out_file)
    in_lines = fin.readlines()
    fin.close
     
    def read_abund_el (eline,header):
        # formatted read
        pz = int(eline[:5])
        el = eline[5:7]
        perc = 10**(float(eline[7:14]))
        del_sol = -1*float(eline[15:])
        
        if pz < 96:
            logeps = batom[pz][3]+del_sol
        else: logeps = del_sol
        # could also do this based on the total
        
        scaled_solar = 1
        if del_sol != header['feh']: scaled_solar = 0

        return [pz,el,perc,del_sol,logeps,scaled_solar]
      
    def read_header (sline):
        """
        Checks for these lines:
        
        TEFF   5000.  GRAVITY 2.20000 LTE 
        TITLE  [-4.3] VTURB=1.3  L/H=1.25 NOVER NEW ODF                                 
        OPACITY IFOP 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0
        CONVECTION ON   1.25 TURBULENCE OFF  0.00  0.00  0.00  0.00

        """
        if sline[0]=='TEFF': 
            header['teff'] = float(sline[1])
            header['grav'] = float(sline[3])
            header['type'] = sline[4]
            return True
        
        elif sline[0]=='TITLE':
            header['feh'] = float(sline[1].strip(']').replace('[',''))
            header['vt'] = float(sline[2].split('=')[1])
            header['l/h'] = sline[3].split('=')[1]
            header['type+']= ' '.join(sline[4:])
            return True
        
        elif sline[0] == 'OPACITY': 
            header['opacity'] = " ".join(sline)             
            return True
        
        elif sline[0] == 'CONVECTION':
            header['convect'] = ' '.join(sline)
            return True

        return False
          
    def read_abund_scale (sline):
        """
        For reading and containing lines:
        
        ABUNDANCE SCALE   1.00000 ABUNDANCE CHANGE 1 0.92140 2 0.07843
        ABUNDANCE CHANGE  3 -15.24  4 -14.94  5 -13.79  6  -6.52  7  -8.42  8  -5.91
        ABUNDANCE CHANGE  9 -11.78 10  -8.26 11 -10.01 12  -8.76 13  -9.87 14  -8.79
        .....
        ABUNDANCE CHANGE 93 -24.30 94 -24.30 95 -24.30 96 -24.30 97 -24.30 98 -24.30
        ABUNDANCE CHANGE 99 -24.30
        ABUNDANCE TABLE

        """
        
        
        if sline[0] != 'ABUNDANCE': return False
        if sline[1] == 'SCALE':
            # do something with these line?
            return True
        
        elif sline[1] == 'CHANGE':
            # do something with these lines?
            return True
        
        elif sline[1] == 'TABLE':
            to_read_table = True
            return True
        
        return False
            
    def read_abundance_table(line,Z,abunds,logepsH,header):
        if not reading_metals:
            sline = line.split()
            val_h = float(sline[1])
            val_he = float(sline[3])

            total = 10**(logepsH)/val_h
            logepsHe = np.log10(val_he*total)
            scaled_solar = 0
            if round(logepsHe,2) == batom[2][3]: scaled_solar=1

            abund_table[1] = [1,'H',val_h,0,logepsH,1]
            abund_table[2] = [2,'He',val_he,0,logepsHe,scaled_solar]

            abunds = np_vstack_append(abunds,[1,val_h,0,logepsH,1])
            abunds = np_vstack_append(abunds,[2,val_he,0,logepsHe,scaled_solar])
            return 3,abunds
        
        ds = 20
        el_split = [line[:ds],
                    line[ds:2*ds],
                    line[2*ds:3*ds],
                    line[3*ds:4*ds],
                    line[4*ds:]]
        
        N = len(el_split)
        for i in xrange(N): 
            if len(el_split[i]) == 0: continue
            out = read_abund_el(el_split[i],header)
            abund_table[Z+i] = out
            abunds = np_vstack_append(abunds,[out[0]]+out[2:])
        Z += N
        
        return Z, abunds
             
    def convert_abunds_for_moog(abunds,ions):
        # use only the non scaled lines
        which = np.argwhere(abunds.T[-1]==0).T[0]
        ab_lines = []
        ab_line = ''

        el_i = 0
        for i in which:
            z = abunds[i][0]
            if z == 2: continue
            logeps = abunds[i][3]
            
            for ion_state in ions:
                z += ion_state/10.0
                
                val = "    "+" ".join([format(z,'>5.2f'),format(logeps,'>5.3f')])
                                
                if el_i%5 == 0 and el_i != 0:
                    ab_lines.append(ab_line)
                    ab_line = val
                else: ab_line += val
                el_i += 1
            
        if el_i%5 != 0: ab_lines.append(ab_line)
        return ab_lines, el_i
        
    header = {}
    abund_table = {}
    abunds = np.array([],dtype=float)
      
    layers_data = np.array([],dtype=float)
    
    reading_metals = False
    to_read_table = False
    i_layer = 0
    N_layers = -1
    Z = 1

    for line in in_lines:
        line = line.rstrip()
        sline = line.split()
        
        # skip blank lines
        if len(sline) == 0: continue
        
        # read first few lines into header
        elif read_header(sline): continue

        #if read_abund_scale(sline): continue
        # skip some lines here that are ABUNDANCE ????
        
        # The next lines should be the abunance table
        elif " ".join(sline) == 'ABUNDANCE TABLE': 
            to_read_table = True
            continue
        
        elif sline[0] == 'READ': 
            # this line separates the abundance table from the 
            # layers of the star
            # READ DECK6 72 RHOX,T,P,XNE,ABROSS,ACCRAD,VTURB
            to_read_table = False
            N_layers = int(sline[2])
            continue
        
        if to_read_table: 
            Z, abunds = read_abundance_table(line,Z,abunds,logepsH,header)
            reading_metals = True # after the first line which is H and He
            continue
                
        elif i_layer < N_layers:
            # read N lines following:
            # READ DECK6 72 RHOX,T,P,XNE,ABROSS,ACCRAD,VTURB
            i_layer += 1            
            layers_data = np_vstack_append(layers_data,np.array(sline,dtype=float))
            
        # should be two more lines I don't really care about:
        #   PRADK 8.3210E-01
        #   BEGIN                    ITERATION  17 COMPLETED
    ab_lines, Natoms = convert_abunds_for_moog(abunds,ions)
    if new_moog_file is None:
        return abunds,abund_table,header,layers_data,
    #=========================================================================#
    # save out as KURUCZ format for MOOG
    lines = []
    lines.append('KURUCZ')
    steff = format(header['teff'],'<10.1f')
    sfeh = format(header['feh'],'<5.2f')
    hdr = [steff,
           format(header['grav'],'<5.2f'),
           sfeh,
           format(header['vt'],'<5.2f'),
           header['type'],
           header['type+']]
    
    lines.append("  ".join(hdr))
    lines.append(format(len(layers_data),'>15'))

    vt_lines = []
    for i in xrange(len(layers_data)):
        arr = layers_data[i]
        dat = [format(arr[0],'>10.5f'), # rhox
               format(arr[1],'>9.1f'), # T
               format(arr[2],'>9.3e'), # P_g
               format(arr[3],'>9.3e'), # N_e
               format(arr[4],'>9.3e')] # ABROSS =?= K_ross
        lines.append(" ".join(dat))
                
        vt_val = " "+format(arr[6],'>12.3e')
        if i == 0: 
            vt_line = vt_val 
            continue
        
        if i%6 == 0:
            vt_lines.append(vt_line)
            vt_line = vt_val 
        else: vt_line += vt_val 
      
    if i%6 != 0: vt_lines.append(vt_line)

    if include_depth_vt: lines += vt_lines
    else: lines.append(format(header['vt'],'>13.3f'))
    
    lines.append('NATOMS '+format(Natoms,'>8')+" "+format(sfeh,'>14'))
    if Natoms != 0: lines += ab_lines
    
    Nmols = 0
    lines.append('NMOL '+format(Nmols,'>10'))
    
    fout = open(new_moog_file,'w')
    fout.write("\n".join(lines))
    fout.close()
    return abunds
 
if __name__ == '__main__':
    import sys
    abunds = convert_atlas_for_moog(sys.argv[1],
                                    sys.argv[2])
                                    
